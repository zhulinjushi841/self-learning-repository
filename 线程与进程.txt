1.线程与进程的基础区别：
1）进程是资源分配的最小单位，线程是程序执行的最小单位(资源调度的最小单位)
2）进程有着自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表
来维护代码段、堆栈段和数据段，这种操作非常昂贵
线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程
要小很多，同时创建一个线程的开销也比进程小得多
3）线程之间的通信更加方便，同一进程下的线程共享全局变量、静态变量等数据，而进程之间的
通信需要使用通信的方式(IPC)进行。不过如何处理好同步和互斥是编写多线程程序的难点

2.线程与进程
进程：指的是在系统中正在运行的一个应用程序；程序一旦运行就是进程，或者说，进程就是
指程序执行时的一个实例，从内核的观点看，进程的目的就是担当分配系统资源(包括CPU时间、内存等)的基本单位

3.线程与进程的高级区别：
1）进程拥有独立的堆栈空间和数据段，所以每次启动一个新的进程就必须分配给它独立的地址空间，建立
众多的数据表来维护其代码段、堆栈段和数据段，这对于多进程而言是十分奢侈的，系统开销比较大；
线程拥有独立的堆栈空间，但是共享数据段，它们彼此之间使用相同的地址空间，共享大部分数据，比进程
更加节俭，开销也更小，切换速度也比进程块，效率高。
2）在通信机制上，由于进程之间互不干扰，相互独立，进程的通信机制相对而言很复杂，例如管道、信号、
消息队列、共享内存、套接字等通信机制，而线程由于共享数据所以通信机制很方便。
3）在CPU系统方面，线程使得CPU系统更加有效，因为操作系统会保证当线程数不大于CPU数目时，不同的
线程运行在不同的CPU上。

4.进程和线程的关系：
1）一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。线程是操作系统可识别的
最小执行和调度单位
2）资源分配给进程，同一进程的所有线程共享该进程的所有资源，同一进程中的多个线程共享代码段(代码和常量)
数据段(全局变量和静态变量)，扩展段(堆存储)。但是每个线程都拥有自己的栈段，栈段也称作是运行时段，用来存放
所有局部变量和临时变量
3）处理机分给线程，也就是真正在处理机上运行的是线程
4）线程在执行过程中，需要写作同步，不同进程的线程间要利用消息通信的方法实现同步

几个知识点：
1.进程分为IO密集型和计算密集型，其中IO密集型进程指的是CPU计算时间短，访问外接设备时间长；计算密集型进程指的是长时间内占用
CPU的进程。
2.进程是操作系统分配资源的基本单位，在/proc/pid目录下可以看到每一个具体进程的相关信息和资源情况，但是却找不到线程的
资源信息，这是因为线程是共享了进程的资源。
3.CPU时间片是由操作系统来调度和管理的，它是将每一个线程任务分配到CPU的某一个核心上，并允许该线程执行一定的时间(例如100ms)，
超过了这个时间此线程就会被切出来，放到就绪队列的尾部，等待下一次被调度。
4.线程是新操作系统调度的基本单位，我们打开top命令看到的tasks数量就是线程数。
5.一个操作系统自身就运行着许多线程，当然很多线程都处于sleep状态，打开top命令就能看到，running的个数
就决定了CPU是否在忙碌。
6.在多核操作系统上，可以并行运行多个任务，可以理解为多个消费者。
7.当需要运行的任务数小于等于逻辑CPU的个数时，那么就不需要进行任务切换。
8.各个逻辑CPU的使用情况并不是均等的。

